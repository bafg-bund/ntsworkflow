// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pearsoncoeff
double pearsoncoeff(NumericVector X, NumericVector Y);
RcppExport SEXP _ntsworkflow_pearsoncoeff(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(pearsoncoeff(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// correlates_with
LogicalVector correlates_with(NumericMatrix aligned_intensities, int row, double coefficient);
RcppExport SEXP _ntsworkflow_correlates_with(SEXP aligned_intensitiesSEXP, SEXP rowSEXP, SEXP coefficientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type aligned_intensities(aligned_intensitiesSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< double >::type coefficient(coefficientSEXP);
    rcpp_result_gen = Rcpp::wrap(correlates_with(aligned_intensities, row, coefficient));
    return rcpp_result_gen;
END_RCPP
}
// correlation
NumericMatrix correlation(NumericMatrix aligned_intensities);
RcppExport SEXP _ntsworkflow_correlation(SEXP aligned_intensitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type aligned_intensities(aligned_intensitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation(aligned_intensities));
    return rcpp_result_gen;
END_RCPP
}
// alignmentBfGC
IntegerMatrix alignmentBfGC(List peaklistR, int mz_dev, int DeltaRT, int mz_dev_unit);
RcppExport SEXP _ntsworkflow_alignmentBfGC(SEXP peaklistRSEXP, SEXP mz_devSEXP, SEXP DeltaRTSEXP, SEXP mz_dev_unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type peaklistR(peaklistRSEXP);
    Rcpp::traits::input_parameter< int >::type mz_dev(mz_devSEXP);
    Rcpp::traits::input_parameter< int >::type DeltaRT(DeltaRTSEXP);
    Rcpp::traits::input_parameter< int >::type mz_dev_unit(mz_dev_unitSEXP);
    rcpp_result_gen = Rcpp::wrap(alignmentBfGC(peaklistR, mz_dev, DeltaRT, mz_dev_unit));
    return rcpp_result_gen;
END_RCPP
}
// pickPeaksOneEicCpp
NumericMatrix pickPeaksOneEicCpp(double mz, double mz_step, std::vector<double> eic, std::vector<double> scantime, double minIntensity, int sn, int noisescans, double peakwidth_min, double peakwidth_max, int maxPeaksPerSignal);
RcppExport SEXP _ntsworkflow_pickPeaksOneEicCpp(SEXP mzSEXP, SEXP mz_stepSEXP, SEXP eicSEXP, SEXP scantimeSEXP, SEXP minIntensitySEXP, SEXP snSEXP, SEXP noisescansSEXP, SEXP peakwidth_minSEXP, SEXP peakwidth_maxSEXP, SEXP maxPeaksPerSignalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< double >::type mz_step(mz_stepSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type eic(eicSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type scantime(scantimeSEXP);
    Rcpp::traits::input_parameter< double >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< int >::type sn(snSEXP);
    Rcpp::traits::input_parameter< int >::type noisescans(noisescansSEXP);
    Rcpp::traits::input_parameter< double >::type peakwidth_min(peakwidth_minSEXP);
    Rcpp::traits::input_parameter< double >::type peakwidth_max(peakwidth_maxSEXP);
    Rcpp::traits::input_parameter< int >::type maxPeaksPerSignal(maxPeaksPerSignalSEXP);
    rcpp_result_gen = Rcpp::wrap(pickPeaksOneEicCpp(mz, mz_step, eic, scantime, minIntensity, sn, noisescans, peakwidth_min, peakwidth_max, maxPeaksPerSignal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ntsworkflow_pearsoncoeff", (DL_FUNC) &_ntsworkflow_pearsoncoeff, 2},
    {"_ntsworkflow_correlates_with", (DL_FUNC) &_ntsworkflow_correlates_with, 3},
    {"_ntsworkflow_correlation", (DL_FUNC) &_ntsworkflow_correlation, 1},
    {"_ntsworkflow_alignmentBfGC", (DL_FUNC) &_ntsworkflow_alignmentBfGC, 4},
    {"_ntsworkflow_pickPeaksOneEicCpp", (DL_FUNC) &_ntsworkflow_pickPeaksOneEicCpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_ntsworkflow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
